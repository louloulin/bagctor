syntax = "proto3";

package actor;

// Actor message service
service ActorService {
  // Send a message to a remote actor
  rpc SendMessage (SendRequest) returns (SendResponse);
  
  // Spawn a remote actor
  rpc SpawnActor (SpawnRequest) returns (SpawnResponse);
  
  // Stop a remote actor
  rpc StopActor (StopRequest) returns (StopResponse);
  
  // Watch a remote actor's lifecycle
  rpc WatchActor (WatchRequest) returns (stream WatchResponse);
}

// Message to be sent to an actor
message SendRequest {
  string actorId = 1;
  Message message = 2;
}

message SendResponse {}

// Request to spawn a new actor
message SpawnRequest {
  string className = 1;
  string id = 2;  // Optional, if not provided server will generate
}

message SpawnResponse {
  string id = 1;
  string address = 2;
}

// Request to stop an actor
message StopRequest {
  string actorId = 1;
}

message StopResponse {}

// Request to watch an actor
message WatchRequest {
  string actorId = 1;
  string watcherId = 2;
}

// Actor lifecycle events
message WatchResponse {
  string type = 1;  // 'terminated' or 'restarted'
  string actorId = 2;
}

message Message {
  string type = 1;
  bytes payload = 2;
  PID sender = 3;
}

message PID {
  string id = 1;
  string address = 2;
} 