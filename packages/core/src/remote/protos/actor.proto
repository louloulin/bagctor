syntax = "proto3";

package actor;

// Actor message service
service ActorService {
  // Send a message to a remote actor
  rpc SendMessage (MessageRequest) returns (MessageResponse);
  
  // Spawn a remote actor
  rpc Spawn (SpawnRequest) returns (SpawnResponse);
  
  // Stop a remote actor
  rpc Stop (StopRequest) returns (StopResponse);
  
  // Watch a remote actor's lifecycle
  rpc Watch (WatchRequest) returns (stream WatchEvent);
}

// Message to be sent to an actor
message MessageRequest {
  string id = 1;
  bytes payload = 2;
  optional string sender = 3;
}

message MessageResponse {
  bool success = 1;
}

// Request to spawn a new actor
message SpawnRequest {
  string actorType = 1;
  bytes config = 2;
}

message SpawnResponse {
  string id = 1;
  string address = 2;
}

// Request to stop an actor
message StopRequest {
  string id = 1;
}

message StopResponse {
  bool success = 1;
}

// Request to watch an actor
message WatchRequest {
  string id = 1;
}

enum EventType {
  STARTED = 0;
  STOPPED = 1;
  FAILED = 2;
}

message WatchEvent {
  EventType type = 1;
  string id = 2;
  optional string error = 3;
}

message Message {
  string type = 1;
  bytes payload = 2;
  PID sender = 3;
}

message PID {
  string id = 1;
  string address = 2;
} 